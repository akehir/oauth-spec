<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd">
<rfc category="std" docName="draft-ietf-oauth-dyn-reg-24" ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='3' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <?rfc strict='yes' ?>

  <?rfc notedraftinprogress='yes' ?>

  <front>
    <title abbrev="OAuth 2.0 Dynamic Registration">OAuth 2.0 Dynamic Client
    Registration Protocol</title>

    <author fullname="Justin Richer" initials="J" role="editor"
            surname="Richer">
      <organization/>

      <address>
        <email>ietf@justin.richer.org</email>
      </address>
    </author>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization abbrev="Microsoft">Microsoft</organization>

      <address>
        <email>mbj@microsoft.com</email>

        <uri>http://self-issued.info/</uri>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="Ping Identity">Ping Identity</organization>

      <address>
        <email>ve7jtb@ve7jtb.com</email>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M" surname="Machulak">
      <organization>Newcastle University</organization>

      <address>
        <email>m.p.machulak@ncl.ac.uk</email>

        <uri>http://ncl.ac.uk/</uri>
      </address>
    </author>

    <author fullname="Phil Hunt" initials="P" surname="Hunt">
      <organization>Oracle Corporation</organization>

      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>

    <date day="19" month="February" year="2015"/>

    <area>Security</area>

    <workgroup>OAuth Working Group</workgroup>

    <abstract>
      <t>This specification defines mechanisms for dynamically registering
      OAuth 2.0 clients with authorization servers. Registration requests send
      a set of desired client metadata values to the authorization server. The
      resulting registration responses return a client identifier to use at
      the authorization server and the client metadata values registered for
      the client. The client can then use this registration information to
      communicate with the authorization server using the OAuth 2.0 protocol.
      This specification also defines a set of common client metadata fields
      and values for clients to use during registration.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">
      <t>In order for an OAuth 2.0 client to utilize an OAuth 2.0
      authorization server, the client needs specific information to interact
      with the server, including an OAuth 2.0 client identifier to use at that
      server. This specification describes how an OAuth 2.0 client can be
      dynamically registered with an authorization server to obtain this
      information.</t>

      <t>As part of the registration process, this specification also defines
      a mechanism for the client to present the authorization server with a
      set of metadata, such as a set of valid redirection URIs. This metadata
      can either be communicated in a self-asserted fashion or as a set of
      metadata called a software statement, which is digitally signed or
      MACed; in the case of a software statement, the issuer is vouching for
      the validity of the data about the client.</t>

      <t>Traditionally, registration of a client with an authorization server
      is performed manually. The mechanisms defined in this specification can
      be used either for a client to dynamically register itself with
      authorization servers or for a client developer to programmatically
      register the client with authorization servers. Multiple applications
      using OAuth 2.0 have previously developed mechanisms for accomplishing
      such registrations. This specification generalizes the registration
      mechanisms defined by the <xref target="OpenID.Registration">OpenID
      Connect Dynamic Client Registration 1.0</xref> specification and used by
      the <xref target="I-D.hardjono-oauth-umacore">User Managed Access (UMA)
      Profile of OAuth 2.0</xref> specification in a way that is compatible
      with both, while being applicable to a wider set of OAuth 2.0 use
      cases.</t>

      <section anchor="Notation" title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"/>.</t>

        <t>Unless otherwise noted, all the protocol parameter names and values
        are case sensitive.</t>
      </section>

      <section anchor="Terminology" title="Terminology">
        <t>This specification uses the terms "access token", "authorization
        code", "authorization endpoint", "authorization grant", "authorization
        server", "client", "client identifier", "client secret", "grant type",
        "protected resource", "redirection URI", "refresh token", "resource
        owner", "resource server", "response type", and "token endpoint"
        defined by <xref target="RFC6749">OAuth 2.0</xref> and uses the term
        "Claim" defined by <xref target="JWT">JSON Web Token (JWT)</xref>.</t>

        <t>This specification defines the following terms:</t>

        <t><list style="hanging">
            <t hangText="Client Software"><vspace/>Software implementing an
            OAuth 2.0 client.</t>

            <t hangText="Client Instance"><vspace/>A deployed instance of a
            piece of client software.</t>

            <t hangText="Client Developer"><vspace/>The person or organization
            that builds a client software package and prepares it for
            distribution. At the time of building the client, the developer is
            often not aware of who the deploying service provider
            organizations will be. Client developers will need to use dynamic
            registration when they are unable to predict aspects of the
            software, such as the deployment URLs, at compile time. For
            instance, this can occur when the software API publisher and the
            deploying organization are not the same.</t>

            <t hangText="Client Registration Endpoint"><vspace/>OAuth 2.0
            endpoint through which a client can be registered at an
            authorization server. The means by which the URL for this endpoint
            is obtained are out of scope for this specification.</t>

            <t hangText="Initial Access Token"><vspace/>OAuth 2.0 access token
            optionally issued by an authorization server to a developer or
            client and used to authorize calls to the client registration
            endpoint. The type and format of this token are likely
            service-specific and are out of scope for this specification. The
            means by which the authorization server issues this token as well
            as the means by which the registration endpoint validates this
            token are out of scope for this specification. Use of an initial
            access token is required when the authorization server limits the
            parties that can register a client.</t>

            <t hangText="Deployment Organization"><vspace/>An administrative
            security domain under which a software API (service) is deployed
            and protected by an OAuth 2.0 framework. In some OAuth scenarios,
            the deployment organization and the software API publisher are the
            same. In these cases, the deploying organization will often have a
            close relationship with client software developers. In many other
            cases, the definer of the service may be an independent
            third-party publisher or a standards organization. When working to
            a published specification for an API, the client software
            developer is unable to have a prior relationship with the
            potentially many deployment organizations deploying the software
            API (service).</t>

            <t hangText="Software API Deployment"><vspace/>A deployed instance
            of a software API that is protected by OAuth 2.0 (a protected
            resource) in a particular deployment organization domain. For any
            particular software API, there may be one or more deployments. A
            software API deployment typically has an associated OAuth 2.0
            authorization server as well as a client registration endpoint.
            The means by which endpoints are obtained are out of scope for
            this specification.</t>

            <t hangText="Software API Publisher"><vspace/>The organization
            that defines a particular web accessible API that may be deployed
            in one or more deployment environments. A publisher may be any
            standards body, commercial, public, private, or open source
            organization that is responsible for publishing and distributing
            software and API specifications that may be protected via OAuth
            2.0. In some cases a software API publisher and a client developer
            may be the same organization. At the time of publication of a web
            accessible API, the software publisher often does not have a prior
            relationship with deploying organizations. </t>

            <t hangText="Software Statement"><vspace/>Digitally signed or
            MACed JSON Web Token (JWT) <xref target="JWT"/> that asserts
            metadata values about the client software. In some cases, a
            software statement will be issued directly by the client
            developer. In other cases, a software statement will be issued by
            a third party organization for use by the client developer. In
            both cases, the trust relationship the authorization server has
            with the issuer of the software statement is intended to be used
            as an input to the evaluation of whether the registration request
            is accepted. A software statement can be presented to an
            authorization server as part of a client registration request.</t>
          </list></t>
      </section>

      <section anchor="ProtocolFlow" title="Protocol Flow">
        <figure>
          <preamble/>

          <artwork><![CDATA[
     +--------(A)- Initial Access Token (OPTIONAL)
     |
     |   +----(B)- Software Statement (OPTIONAL) 
     |   |
     v   v
 +-----------+                                      +---------------+
 |           |--(C)- Client Registration Request -->|    Client     |
 | Client or |                                      | Registration  |
 | Developer |<-(D)- Client Information Response ---|   Endpoint    |
 |           |        or Client Error Response      +---------------+
 +-----------+

]]></artwork>

          <postamble>Figure 1: Abstract Dynamic Client Registration
          Flow</postamble>
        </figure>

        <t>The abstract OAuth 2.0 client dynamic registration flow illustrated
        in Figure 1 describes the interaction between the client or developer
        and the endpoint defined in this specification. This figure does not
        demonstrate error conditions. This flow includes the following
        steps:</t>

        <t><list style="hanging">
            <t hangText="(A)">Optionally, the client or developer is issued an
            initial access token giving access to the client registration
            endpoint. The method by which the initial access token is issued
            to the client or developer is out of scope for this
            specification.</t>

            <t hangText="(B)">Optionally, the client or developer is issued a
            software statement for use with the client registration endpoint.
            The method by which the software statement is issued to the client
            or developer is out of scope for this specification.</t>

            <t hangText="(C)">The client or developer calls the client
            registration endpoint with the client's desired registration
            metadata, optionally including the initial access token from (A)
            if one is required by the authorization server.</t>

            <t hangText="(D)">The authorization server registers the client
            and returns the client's registered metadata, a client identifier
            that is unique at the server, a set of client credentials such as
            a client secret if applicable for this client, and possibly other
            values.</t>
          </list></t>

        <t>Examples of different configurations and usages are included in
        <xref target="UseCases"/>.</t>
      </section>
    </section>

    <section anchor="ClientMetadata" title="Client Metadata">
      <t>Registered clients have a set of metadata values associated with
      their client identifier at an authorization server, such as the list of
      valid redirection URIs or a display name.</t>

      <t>These client metadata values are used in two ways:</t>

      <t><list style="symbols">
          <t>as input values to registration requests, and</t>

          <t>as output values in registration responses.</t>
        </list></t>

      <t>The following client metadata fields are defined by this
      specification. The implementation and use of all client metadata fields
      is OPTIONAL, unless stated otherwise.</t>

      <t><list style="hanging">
          <t hangText="redirect_uris"><vspace/>Array of redirection URI values
          for use in redirect-based flows such as the authorization code and
          implicit flows. As required by Section 2 of <xref
          target="RFC6749">OAuth 2.0</xref>, clients using flows with
          redirection MUST register their redirection URI values.
          Authorization servers that support dynamic registration for
          redirect-based flows MUST implement support for this metadata
          value.</t>

          <t hangText="token_endpoint_auth_method"><vspace/>The requested
          authentication method for the token endpoint. Values defined by this
          specification are: <list style="symbols">
              <t><spanx style="verb">none</spanx>: The client is a public
              client as defined in OAuth 2.0 and does not have a client
              secret.</t>

              <t><spanx style="verb">client_secret_post</spanx>: The client
              uses the HTTP POST parameters defined in OAuth 2.0 section
              2.3.1.</t>

              <t><spanx style="verb">client_secret_basic</spanx>: the client
              uses HTTP Basic defined in OAuth 2.0 section 2.3.1</t>
            </list> Additional values can be defined via the IANA OAuth Token
          Endpoint Authentication Methods Registry established in <xref
          target="TEAMRegistry"/>. Absolute URIs can also be used as values
          for this parameter without being registered. If unspecified or
          omitted, the default is <spanx style="verb">client_secret_basic</spanx>,
          denoting HTTP Basic Authentication Scheme as specified in Section
          2.3.1 of OAuth 2.0.</t>

          <t hangText="grant_types"><vspace/>Array of OAuth 2.0 grant types
          that the client may use. These grant types are defined as follows:
          <list style="symbols">
              <t><spanx style="verb">authorization_code</spanx>: The
              Authorization Code Grant described in OAuth 2.0 Section 4.1</t>

              <t><spanx style="verb">implicit</spanx>: The Implicit Grant
              described in OAuth 2.0 Section 4.2</t>

              <t><spanx style="verb">password</spanx>: The Resource Owner
              Password Credentials Grant described in OAuth 2.0 Section
              4.3</t>

              <t><spanx style="verb">client_credentials</spanx>: The Client
              Credentials Grant described in OAuth 2.0 Section 4.4</t>

              <t><spanx style="verb">refresh_token</spanx>: The Refresh Token
              Grant described in OAuth 2.0 Section 6.</t>

              <t><spanx style="verb">urn:ietf:params:oauth:grant-type:jwt-bearer</spanx>:
              The JWT Bearer Grant defined in <xref target="OAuth.JWT">OAuth
              JWT Bearer Token Profiles</xref>.</t>

              <t><spanx style="verb">urn:ietf:params:oauth:grant-type:saml2-bearer</spanx>:
              The SAML 2 Bearer Grant defined in <xref
              target="OAuth.SAML2">OAuth SAML 2 Bearer Token
              Profiles</xref>.</t>
            </list>If the token endpoint is used in the grant type, the value
          of this parameter MUST be the same as the value of the <spanx
          style="verb">grant_type</spanx> parameter passed to the token
          endpoint defined in the grant type definition. Authorization servers
          MAY allow for other values as defined in the grant type extension
          process described in OAuth 2.0 Section 2.5. If omitted, the default
          behavior is that the client will use only the <spanx style="verb">authorization_code</spanx>
          Grant Type.</t>

          <t hangText="response_types"><vspace/>Array of the OAuth 2.0
          response types that the client can use. These response types are
          defined as follows: <list style="symbols">
              <t><spanx style="verb">code</spanx>: The authorization code
              response described in OAuth 2.0 Section 4.1.</t>

              <t><spanx style="verb">token</spanx>: The implicit response
              described in OAuth 2.0 Section 4.2.</t>
            </list>If the authorization endpoint is used by the grant type,
          the value of this parameter MUST be the same as the value of the
          <spanx style="verb">response_type</spanx> parameter passed to the
          authorization endpoint defined in the grant type definition.
          Authorization servers MAY allow for other values as defined in the
          grant type extension process is described in OAuth 2.0 Section 2.5.
          If omitted, the default is that the client will use only the <spanx
          style="verb">code</spanx> response type.</t>

          <t hangText="client_name"><vspace/>Human-readable name of the client
          to be presented to the user during authorization. If omitted, the
          authorization server MAY display the raw <spanx style="verb">client_id</spanx>
          value to the user instead. It is RECOMMENDED that clients always
          send this field. The value of this field MAY be internationalized,
          as described in <xref target="HumanReadableClientMetadata"/>.</t>

          <t hangText="client_uri"><vspace/>URL of a web page providing
          information about the client. If present, the server SHOULD display
          this URL to the end user in a clickable fashion. It is RECOMMENDED
          that clients always send this field. The value of this field MUST
          point to a valid web page. The value of this field MAY be
          internationalized, as described in <xref
          target="HumanReadableClientMetadata"/>.</t>

          <t hangText="logo_uri"><vspace/>URL that references a logo for the
          client. If present, the server SHOULD display this image to the end
          user during approval. The value of this field MUST point to a valid
          image file. The value of this field MAY be internationalized, as
          described in <xref target="HumanReadableClientMetadata"/>.</t>

          <t hangText="scope"><vspace/>Space separated list of scope values
          (as described in Section 3.3 of <xref target="RFC6749">OAuth
          2.0</xref>) that the client can use when requesting access tokens.
          The semantics of values in this list is service specific. If
          omitted, an authorization server MAY register a client with a
          default set of scopes.</t>

          <t hangText="contacts"><vspace/>Array of strings representing ways
          to contact people responsible for this client, typically email
          addresses. The authorization server MAY make these addresses
          available to end users for support requests for the client.</t>

          <t hangText="tos_uri"><vspace/>URL that points to a human-readable
          terms of service document for the client that describes a
          contractual relationship between the end-user and the client that
          the end-user accepts when authorizing the client. The authorization
          server SHOULD display this URL to the end-user if it is provided.
          The value of this field MUST point to a valid web page. The value of
          this field MAY be internationalized, as described in <xref
          target="HumanReadableClientMetadata"/>.</t>

          <t hangText="policy_uri"><vspace/>URL that points to a
          human-readable privacy policy document that describes how the
          deployment organization collects, uses, retains, and discloses
          personal data. The authorization server SHOULD display this URL to
          the end-user if it is provided. The value of this field MUST point
          to a valid web page. The value of this field MAY be
          internationalized, as described in <xref
          target="HumanReadableClientMetadata"/>.</t>

          <t hangText="jwks_uri"><vspace/>URL referencing the client's JSON
          Web Key Set <xref target="JWK"/> document, which contains the
          client's public keys. The value of this field MUST point to a valid
          JWK Set document. These keys can be used by higher level protocols
          that use signing or encryption. For instance, these keys might be
          used by some applications for validating signed requests made to the
          token endpoint when using JWTs for client authentication <xref
          target="OAuth.JWT"/>. Use of this parameter is preferred over the
          <spanx style="verb">jwks</spanx> parameter, as it allows for easier
          key rotation. The <spanx style="verb">jwks_uri</spanx> and <spanx
          style="verb">jwks</spanx> parameters MUST NOT both be present in the
          same request or response.</t>

          <t hangText="jwks"><vspace/>Client's JSON Web Key Set <xref
          target="JWK"/> document value, which contains the client's public
          keys. The value of this field MUST be a JSON object containing a
          valid JWK Set. These keys can be used by higher level protocols that
          use signing or encryption. This parameter is intended to be used by
          clients that cannot use the <spanx style="verb">jwks_uri</spanx>
          parameter, such as native clients that cannot host public URLs. The
          <spanx style="verb">jwks_uri</spanx> and <spanx style="verb">jwks</spanx>
          parameters MUST NOT both be present in the same request or
          response.</t>

          <t hangText="software_id"><vspace/>A unique identifier (e.g. a UUID)
          assigned by the client developer or software publisher used by
          registration endpoints to identify the client software to be
          dynamically registered. Unlike <spanx style="verb">client_id</spanx>,
          which is issued by the authorization server and SHOULD vary between
          instances, the <spanx style="verb">software_id</spanx> SHOULD remain
          the same for all instances of the client software. The <spanx
          style="verb">software_id</spanx> SHOULD remain the same across
          multiple updates or versions of the same piece of software. The
          value of this field is not intended to be human readable and is
          usually opaque to the client and authorization server.</t>

          <t hangText="software_version"><vspace/>A version identifier for the
          client software identified by <spanx style="verb">software_id</spanx>.
          The value of the <spanx style="verb">software_version</spanx> SHOULD
          change on any update to the client software identified by the same
          <spanx style="verb">software_id</spanx>. The value of this field is
          a string that is intended to be compared using string equality
          matching. The value of this field is not intended to be human
          readable and is usually opaque to the client and authorization
          server.</t>
        </list></t>

      <t>Extensions and profiles of this specification MAY expand this list.
      The authorization server MUST ignore any client metadata values sent by
      the client that it does not understand.</t>

      <t>Client metadata values can either be communicated directly in the
      body of a registration request, as described in <xref
      target="RegistrationRequest"/>, or included as claims in a software
      statement, as described in <xref target="SoftwareStatement"/>, or a
      mixture of both. If the same client metadata name is present in both
      locations and the software statement is trusted by the authorization
      server, the value of a claim in the software statement MUST take
      precedence.</t>

      <section anchor="GrantTypesAndResponseTypes"
               title="Relationship between Grant Types and Response Types">
        <t>The <spanx style="verb">grant_types</spanx> and <spanx
        style="verb">response_types</spanx> values described above are
        partially orthogonal, as they refer to arguments passed to different
        endpoints in the OAuth protocol. However, they are related in that the
        <spanx style="verb">grant_types</spanx> available to a client
        influence the <spanx style="verb">response_types</spanx> that the
        client is allowed to use, and vice versa. For instance, a <spanx
        style="verb">grant_types</spanx> value that includes <spanx
        style="verb">authorization_code</spanx> implies a <spanx style="verb">response_types</spanx>
        value that includes <spanx style="verb">code</spanx>, as both values
        are defined as part of the OAuth 2.0 authorization code grant. As
        such, a server supporting these fields SHOULD take steps to ensure
        that a client cannot register itself into an inconsistent state, for
        example by returning an <spanx style="verb">invalid_client_metadata</spanx>
        error response to an inconsistent registration request.</t>

        <t>The correlation between the two fields is listed in the table
        below.</t>

        <texttable>
          <ttcol>grant_types value includes:</ttcol>

          <ttcol>response_types value includes:</ttcol>

          <c>authorization_code</c>

          <c>code</c>

          <c>implicit</c>

          <c>token</c>

          <c>password</c>

          <c>(none)</c>

          <c>client_credentials</c>

          <c>(none)</c>

          <c>refresh_token</c>

          <c>(none)</c>

          <c>urn:ietf:params:oauth:grant-type:jwt-bearer</c>

          <c>(none)</c>

          <c>urn:ietf:params:oauth:grant-type:saml2-bearer</c>

          <c>(none)</c>
        </texttable>

        <t>Extensions and profiles of this document that introduce new values
        to either the <spanx style="verb">grant_types</spanx> or <spanx
        style="verb">response_types</spanx> parameter MUST document all
        correspondences between these two parameter types.</t>
      </section>

      <section anchor="HumanReadableClientMetadata"
               title="Human Readable Client Metadata">
        <t>Human-readable client metadata values and client metadata values
        that reference human-readable values MAY be represented in multiple
        languages and scripts. For example, the values of fields such as
        <spanx style="verb">client_name</spanx>, <spanx style="verb">tos_uri</spanx>,
        <spanx style="verb">policy_uri</spanx>, <spanx style="verb">logo_uri</spanx>,
        and <spanx style="verb">client_uri</spanx> might have multiple
        locale-specific values in some client registrations to facilitate use
        in different locations.</t>

        <t>To specify the languages and scripts, <xref
        target="RFC5646">BCP47</xref> language tags are added to client
        metadata member names, delimited by a # character. Since <xref
        target="RFC7159">JSON</xref> member names are case sensitive, it is
        RECOMMENDED that language tag values used in Claim Names be spelled
        using the character case with which they are registered in the <xref
        target="IANA.Language">IANA Language Subtag Registry</xref>. In
        particular, normally language names are spelled with lowercase
        characters, region names are spelled with uppercase characters, and
        languages are spelled with mixed case characters. However, since BCP47
        language tag values are case insensitive, implementations SHOULD
        interpret the language tag values supplied in a case insensitive
        manner. Per the recommendations in BCP47, language tag values used in
        metadata member names should only be as specific as necessary. For
        instance, using <spanx style="verb">fr</spanx> might be sufficient in
        many contexts, rather than <spanx style="verb">fr-CA</spanx> or <spanx
        style="verb">fr-FR</spanx>.</t>

        <t>For example, a client could represent its name in English as <spanx
        style="verb">"client_name#en": "My Client"</spanx> and its name in
        Japanese as <spanx style="verb">"client_name#ja-Jpan-JP": "\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u540D"</spanx>
        within the same registration request. The authorization server MAY
        display any or all of these names to the resource owner during the
        authorization step, choosing which name to display based on system
        configuration, user preferences or other factors.</t>

        <t>If any human-readable field is sent without a language tag, parties
        using it MUST NOT make any assumptions about the language, character
        set, or script of the string value, and the string value MUST be used
        as-is wherever it is presented in a user interface. To facilitate
        interoperability, it is RECOMMENDED that clients and servers use a
        human-readable field without any language tags in addition to any
        language-specific fields, and it is RECOMMENDED that any
        human-readable fields sent without language tags contain values
        suitable for display on a wide variety of systems.</t>

        <t>Implementer's Note: Many JSON libraries make it possible to
        reference members of a JSON object as members of an object construct
        in the native programming environment of the library. However, while
        the <spanx style="verb">#</spanx> character is a valid character
        inside of a JSON object's member names, it is not a valid character
        for use in an object member name in many programming environments.
        Therefore, implementations will need to use alternative access forms
        for these claims. For instance, in JavaScript, if one parses the JSON
        as follows, <spanx style="verb">var j = JSON.parse(json);</spanx>,
        then as a workaround the member <spanx style="verb">client_name#en-us</spanx>
        can be accessed using the JavaScript syntax <spanx style="verb">j["client_name#en-us"]</spanx>.</t>
      </section>

      <section anchor="SoftwareStatement" title="Software Statement">
        <t>A software statement is a JSON Web Token (JWT) <xref target="JWT"/>
        that asserts metadata values about the client software as a bundle. A
        set of claims that can be used in a software statement are defined in
        <xref target="ClientMetadata"/>. When presented to the authorization
        server as part of a client registration request, the software
        statement MUST be digitally signed or MACed using <xref
        target="JWS">JWS</xref> and MUST contain an <spanx style="verb">iss</spanx>
        (issuer) claim denoting the party attesting to the claims in the
        software statement. It is RECOMMENDED that software statements be
        digitally signed using the <spanx style="verb">RS256</spanx> signature
        algorithm, although particular applications MAY specify the use of
        different algorithms. It is RECOMMENDED that software statements
        contain the <spanx style="verb">software_id</spanx> claim to allow
        authorization servers to correlate different instances of software
        using the same software statement.</t>

        <t>For example, a software statement could contain the following
        claims:</t>

        <figure>
          <artwork><![CDATA[{
 "software_id": "4NRB1-0XZABZI9E6-5SM3R",
 "client_name": "Example Statement-based Client",
 "client_uri": "https://client.example.net/"
}]]></artwork>
        </figure>

        <t/>

        <t>The following non-normative example JWT includes these claims and
        has been asymmetrically signed using RS256:</t>

        <figure>
          <preamble>Line breaks are for display purposes only</preamble>

          <artwork><![CDATA[eyJhbGciOiJSUzI1NiJ9.
eyJzb2Z0d2FyZV9pZCI6IjROUkIxLTBYWkFCWkk5RTYtNVNNM1IiLCJjbGll
bnRfbmFtZSI6IkV4YW1wbGUgU3RhdGVtZW50LWJhc2VkIENsaWVudCIsImNs
aWVudF91cmkiOiJodHRwczovL2NsaWVudC5leGFtcGxlLm5ldC8ifQ.
GHfL4QNIrQwL18BSRdE595T9jbzqa06R9BT8w409x9oIcKaZo_mt15riEXHa
zdISUvDIZhtiyNrSHQ8K4TvqWxH6uJgcmoodZdPwmWRIEYbQDLqPNxREtYn0
5X3AR7ia4FRjQ2ojZjk5fJqJdQ-JcfxyhK-P8BAWBd6I2LLA77IG32xtbhxY
fHX7VhuU5ProJO8uvu3Ayv4XRhLZJY4yKfmyjiiKiPNe-Ia4SMy_d_QSWxsk
U5XIQl5Sa2YRPMbDRXttm2TfnZM1xx70DoYi8g6czz-CPGRi4SW_S2RKHIJf
IjoI3zTJ0Y2oe0_EJAiXbL6OyF9S5tKxDXV8JIndSA
]]></artwork>
        </figure>

        <t/>

        <t>The means by which a client or developer obtains a software
        statement are outside the scope of this specification. Some common
        methods could include a client developer generating a client-specific
        JWT registering with a software API publisher to obtain a software
        statement for a class of clients. The software statement is typically
        distributed with all instances of a client application.</t>

        <t>The criteria by which authorization servers determine whether to
        trust and utilize the information in a software statement are beyond
        the scope of this specification.</t>

        <t>In some cases, authorization servers MAY choose to accept a
        software statement value directly as a client identifier in an
        authorization request, without a prior dynamic client registration
        having been performed. The circumstances under which an authorization
        server would do so, and the specific software statement
        characteristics required in this case, are beyond the scope of this
        specification.</t>
      </section>
    </section>

    <section anchor="RegistrationEndpoint"
             title="Client Registration Endpoint">
      <t>The client registration endpoint is an OAuth 2.0 endpoint defined in
      this document that is designed to allow a client to be registered with
      the authorization server. The client registration endpoint MUST accept
      HTTP POST messages with request parameters encoded in the entity body
      using the <spanx style="verb">application/json</spanx> format. The
      client registration endpoint MUST be protected by a transport-layer
      security mechanism, and the server MUST support TLS 1.2 <xref
      target="RFC5246">RFC 5246</xref> and MAY support additional
      transport-layer mechanisms meeting its security requirements. When using
      TLS, the client MUST perform a TLS/SSL server certificate check, per
      <xref target="RFC6125">RFC 6125</xref>. Implementation security
      considerations can be found in <xref target="TLS.BCP">Recommendations
      for Secure Use of TLS and DTLS</xref>.</t>

      <t>The client registration endpoint MAY be an OAuth 2.0 protected
      resource and accept an initial access token in the form of an <xref
      target="RFC6749">OAuth 2.0</xref> access token to limit registration to
      only previously authorized parties. The method by which the initial
      access token is obtained by the client or developer is generally
      out-of-band and is out of scope for this specification. The method by
      which the initial access token is verified and validated by the client
      registration endpoint is out of scope for this specification.</t>

      <t>To support open registration and facilitate wider interoperability,
      the client registration endpoint SHOULD allow registration requests with
      no authorization (which is to say, with no initial access token in the
      request). These requests MAY be rate-limited or otherwise limited to
      prevent a denial-of-service attack on the client registration
      endpoint.</t>

      <section anchor="RegistrationRequest"
               title="Client Registration Request">
        <t>This operation registers a client with the authorization server.
        The authorization server assigns this client a unique client
        identifier, optionally assigns a client secret, and associates the
        metadata provided in the request with the issued client identifier.
        The request includes any client metadata parameters being specified
        for the client during the registration. The authorization server MAY
        provision default values for any items omitted in the client
        metadata.</t>

        <t>To register, the client or developer sends an HTTP POST to the
        client registration endpoint with a content type of <spanx
        style="verb">application/json</spanx>. The HTTP Entity Payload is a
        <xref target="RFC7159">JSON</xref> document consisting of a JSON
        object and all requested client metadata values as top-level members
        of that JSON object.</t>

        <t>For example, if the server supports open registration (with no
        initial access token), the client could send the following
        registration request to the client registration endpoint:</t>

        <figure>
          <preamble>The following is a non-normative example request not using
          an initial access token (with line wraps within values for display
          purposes only):</preamble>

          <artwork><![CDATA[
  POST /register HTTP/1.1
  Content-Type: application/json
  Accept: application/json
  Host: server.example.com

  {
   "redirect_uris":[
     "https://client.example.org/callback",
     "https://client.example.org/callback2"],
   "client_name":"My Example Client",
   "client_name#ja-Jpan-JP":
      "\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u540D",
   "token_endpoint_auth_method":"client_secret_basic",
   "logo_uri":"https://client.example.org/logo.png",
   "jwks_uri":"https://client.example.org/my_public_keys.jwks",
   "example_extension_parameter": "example_value"
  }
]]></artwork>
        </figure>

        <t>Alternatively, if the server supports authorized registration, the
        developer or the client will be provisioned with an initial access
        token. (The method by which the initial access token is obtained is
        out of scope for this specification.) The developer or client sends
        the following authorized registration request to the client
        registration endpoint. Note that the initial access token sent in this
        example as an OAuth 2.0 Bearer Token <xref target="RFC6750"/>, but any
        OAuth 2.0 token type could be used by an authorization server.</t>

        <figure>
          <preamble>The following is a non-normative example request using an
          initial access token and registering a JWK set by value (with line
          wraps within values for display purposes only):</preamble>

          <artwork><![CDATA[
  POST /register HTTP/1.1
  Content-Type: application/json
  Accept: application/json
  Authorization: Bearer ey23f2.adfj230.af32-developer321
  Host: server.example.com

  {
   "redirect_uris":["https://client.example.org/callback",
      "https://client.example.org/callback2"],
   "client_name":"My Example Client",
   "client_name#ja-Jpan-JP":
      "\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u540D",
   "token_endpoint_auth_method":"client_secret_basic",
   "policy_uri":"https://client.example.org/policy.html",
   "jwks":{"keys":[{
      "e": "AQAB",
      "n": "nj3YJwsLUFl9BmpAbkOswCNVx17Eh9wMO-_AReZwBqfaWFcfG
HrZXsIV2VMCNVNU8Tpb4obUaSXcRcQ-VMsfQPJm9IzgtRdAY8NN8Xb7PEcYyk
lBjvTtuPbpzIaqyiUepzUXNDFuAOOkrIol3WmflPUUgMKULBN0EUd1fpOD70p
RM0rlp_gg_WNUKoW1V-3keYUJoXH9NztEDm_D2MQXj9eGOJJ8yPgGL8PAZMLe
2R7jb9TxOCPDED7tY_TU4nFPlxptw59A42mldEmViXsKQt60s1SLboazxFKve
qXC_jpLUt22OC6GUG63p-REw-ZOr3r845z50wMuzifQrMI9bQ",
      "kty": "RSA"
   }]},
   "example_extension_parameter": "example_value"
  }
]]></artwork>
        </figure>

        <section anchor="ClientRegistrationSoftwareStatement"
                 title="Client Registration Request Using a Software Statement">
          <t>In addition to JSON elements, client metadata values MAY also be
          provided in a software statement, as described in <xref
          target="SoftwareStatement"/>. The authorization server MAY ignore
          the software statement if it does not support this feature. If the
          server supports software statements, client metadata values conveyed
          in the software statement MUST take precedence over those conveyed
          using plain JSON elements.</t>

          <t>Software statements are included in the requesting JSON object
          using this OPTIONAL member: <list style="hanging">
              <t hangText="software_statement"><vspace/> A software statement
              containing client metadata values about the client software as
              claims.</t>
            </list></t>

          <figure>
            <preamble>In the following example, some registration parameters
            are conveyed as claims in a software statement from the example in
            the <xref target="SoftwareStatement"/> section, while some values
            specific to the client instance are conveyed as regular parameters
            (with line wraps within values for display purposes
            only):</preamble>

            <artwork><![CDATA[
  POST /register HTTP/1.1
  Content-Type: application/json
  Accept: application/json
  Host: server.example.com

  {
    "redirect_uris":[
      "https://client.example.org/callback",
      "https://client.example.org/callback2"
    ],
    "software_statement":"eyJhbGciOiJSUzI1NiJ9.
eyJzb2Z0d2FyZV9pZCI6IjROUkIxLTBYWkFCWkk5RTYtNVNNM1IiLCJjbGll
bnRfbmFtZSI6IkV4YW1wbGUgU3RhdGVtZW50LWJhc2VkIENsaWVudCIsImNs
aWVudF91cmkiOiJodHRwczovL2NsaWVudC5leGFtcGxlLm5ldC8ifQ.
GHfL4QNIrQwL18BSRdE595T9jbzqa06R9BT8w409x9oIcKaZo_mt15riEXHa
zdISUvDIZhtiyNrSHQ8K4TvqWxH6uJgcmoodZdPwmWRIEYbQDLqPNxREtYn0
5X3AR7ia4FRjQ2ojZjk5fJqJdQ-JcfxyhK-P8BAWBd6I2LLA77IG32xtbhxY
fHX7VhuU5ProJO8uvu3Ayv4XRhLZJY4yKfmyjiiKiPNe-Ia4SMy_d_QSWxsk
U5XIQl5Sa2YRPMbDRXttm2TfnZM1xx70DoYi8g6czz-CPGRi4SW_S2RKHIJf
IjoI3zTJ0Y2oe0_EJAiXbL6OyF9S5tKxDXV8JIndSA",
    "scope":"read write",
    "example_extension_parameter":"example_value"
  }
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="Responses" title="Responses">
        <t>Upon a successful registration request, the authorization server
        returns a client identifier for the client. The server responds with
        an HTTP 201 Created code and a body of type <spanx style="verb">application/json</spanx>
        with content as described in <xref target="ClientInfoResponse"/>.</t>

        <t>Upon an unsuccessful registration request, the authorization server
        responds with an error, as described in <xref
        target="ClientRegistrationError"/>.</t>

        <section anchor="ClientInfoResponse"
                 title="Client Information Response">
          <t>The response contains the client identifier as well as the client
          secret, if the client is a confidential client. The response MAY
          contain additional fields as specified by extensions to this
          specification.</t>

          <t><list style="hanging">
              <t hangText="client_id"><vspace/> REQUIRED. OAuth 2.0 client
              identifier. It SHOULD NOT be currently valid for any other
              registered client, though an authorization server MAY issue the
              same client identifier to multiple instances of a registered
              client at its discretion.</t>

              <t hangText="client_secret"><vspace/> OPTIONAL. OAuth 2.0 client
              secret. If issued, this MUST be unique for each <spanx
              style="verb">client_id</spanx> and SHOULD be unique for multiple
              instances of a client using the same <spanx style="verb">client_id</spanx>.
              This value is used by confidential clients to authenticate to
              the token endpoint as described in <xref target="RFC6749">OAuth
              2.0</xref> Section 2.3.1.</t>

              <t hangText="client_id_issued_at"><vspace/> OPTIONAL. Time at
              which the client identifier was issued. The time is represented
              as the number of seconds from 1970-01-01T0:0:0Z as measured in
              UTC until the date/time of issuance.</t>

              <t hangText="client_secret_expires_at"><vspace/> REQUIRED if
              <spanx style="verb">client_secret</spanx> is issued. Time at
              which the client secret will expire or 0 if it will not expire.
              The time is represented as the number of seconds from
              1970-01-01T0:0:0Z as measured in UTC until the date/time of
              expiration.</t>
            </list></t>

          <t>Additionally, the authorization server MUST return all registered
          metadata about this client, including any fields provisioned by the
          authorization server itself. The authorization server MAY reject or
          replace any of the client's requested metadata values submitted
          during the registration and substitute them with suitable
          values.</t>

          <t>The response is an <spanx style="verb">application/json</spanx>
          document with all parameters as top-level members of a <xref
          target="RFC7159">JSON object</xref>.</t>

          <t>If a software statement was used as part of the registration, its
          value MUST be returned unmodified in the response along with other
          metadata using the <spanx style="verb">software_statement</spanx>
          member name. Client metadata elements used from the software
          statement MUST also be returned directly as top-level client
          metadata values in the registration response (possibly with
          different values, since the values requested and the values used may
          differ).</t>

          <figure>
            <preamble>Following is a non-normative example
            response:</preamble>

            <artwork><![CDATA[
  HTTP/1.1 201 Created
  Content-Type: application/json
  Cache-Control: no-store
  Pragma: no-cache

  {
   "client_id":"s6BhdRkqt3",
   "client_secret": "cf136dc3c1fc93f31185e5885805d",
   "client_id_issued_at":2893256800,
   "client_secret_expires_at":2893276800,
   "redirect_uris":[
     "https://client.example.org/callback",
     "https://client.example.org/callback2"],
   "grant_types": ["authorization_code", "refresh_token"],
   "client_name":"My Example Client",
   "client_name#ja-Jpan-JP":
      "\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u540D",
   "token_endpoint_auth_method":"client_secret_basic",
   "logo_uri":"https://client.example.org/logo.png",
   "jwks_uri":"https://client.example.org/my_public_keys.jwks",
   "example_extension_parameter": "example_value"
  }
]]></artwork>
          </figure>
        </section>

        <section anchor="ClientRegistrationError"
                 title="Client Registration Error Response">
          <t>When an OAuth 2.0 error condition occurs, such as the client
          presenting an invalid initial access token, the authorization server
          returns an error response appropriate to the OAuth 2.0 token
          type.</t>

          <t>When a registration error condition occurs, the authorization
          server returns an HTTP 400 status code (unless otherwise specified)
          with content type <spanx style="verb">application/json</spanx>
          consisting of a <xref target="RFC7159">JSON object</xref> describing
          the error in the response body.</t>

          <t>Two members are defined for inclusion in the JSON object:</t>

          <t><list style="hanging">
              <t hangText="error"><vspace/> REQUIRED. Single ASCII error code
              string.</t>

              <t hangText="error_description"><vspace/> OPTIONAL.
              Human-readable ASCII text description of the error used for
              debugging.</t>
            </list> Other members MAY also be included, and if not understood,
          MUST be ignored.</t>

          <t>This specification defines the following error codes:</t>

          <t><list style="hanging">
              <t hangText="invalid_redirect_uri"><vspace/> The value of one or
              more redirection URIs is invalid.</t>

              <t hangText="invalid_client_metadata"><vspace/> The value of one
              of the client metadata fields is invalid and the server has
              rejected this request. Note that an authorization server MAY
              choose to substitute a valid value for any requested parameter
              of a client's metadata.</t>

              <t hangText="invalid_software_statement"><vspace/> The software
              statement presented is invalid.</t>

              <t hangText="unapproved_software_statement"><vspace/> The
              software statement presented is not approved for use by this
              authorization server.</t>
            </list></t>

          <figure>
            <preamble>Following is a non-normative example of an error
            response resulting from a redirection URI that has been
            blacklisted by the authorization server (with line wraps within
            values for display purposes only):</preamble>

            <artwork><![CDATA[
  HTTP/1.1 400 Bad Request
  Content-Type: application/json
  Cache-Control: no-store
  Pragma: no-cache

  {
   "error": "invalid_redirect_uri",
   "error_description": "The redirection URI
     http://sketchy.example.com is not allowed by this server."
  }
]]></artwork>
          </figure>

          <figure>
            <preamble>Following is a non-normative example of an error
            response resulting from an inconsistent combination of <spanx
            style="verb">response_types</spanx> and <spanx style="verb">grant_types</spanx>
            values (with line wraps within values for display purposes
            only):</preamble>

            <artwork><![CDATA[
  HTTP/1.1 400 Bad Request
  Content-Type: application/json
  Cache-Control: no-store
  Pragma: no-cache

  {
   "error": "invalid_client_metadata",
   "error_description": "The grant type 'authorization_code' must be
     registered along with the response type 'code' but found only 
    'implicit' instead."
  }
]]></artwork>
          </figure>
        </section>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <section anchor="MetadataRegistry"
               title="OAuth Dynamic Registration Client Metadata Registry">
        <t>This specification establishes the OAuth Dynamic Registration
        Client Metadata registry.</t>

        <t>OAuth registration client metadata values are registered with a
        Specification Required (<xref target="RFC5226"/>) after a two-week
        review period on the oauth-ext-review@ietf.org mailing list, on the
        advice of one or more Designated Experts. However, to allow for the
        allocation of values prior to publication, the Designated Expert(s)
        may approve registration once they are satisfied that such a
        specification will be published.</t>

        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
        mailing list for review and comment, with an appropriate subject
        (e.g., "Request to register OAuth Dynamic Registration Client Metadata
        name: example").</t>

        <t>Within the review period, the Designated Expert(s) will either
        approve or deny the registration request, communicating this decision
        to the review list and IANA. Denials should include an explanation
        and, if applicable, suggestions as to how to make the request
        successful.</t>

        <t>IANA must only accept registry updates from the Designated
        Expert(s) and should direct all requests for registration to the
        review mailing list.</t>

        <section anchor="MetadataTemplate" title="Registration Template">
          <t><list style="hanging">
              <t hangText="Client Metadata Name:"><vspace/> The name requested
              (e.g., "example"). This name is case sensitive. Names that match
              other registered names in a case insensitive manner SHOULD NOT
              be accepted.</t>

              <t hangText="Client Metadata Description:"><vspace/> Brief
              description of the metadata value (e.g., "Example
              description").</t>

              <t hangText="Change controller:"><vspace/> For Standards Track
              RFCs, state "IESG". For others, give the name of the responsible
              party. Other details (e.g., postal address, email address, home
              page URI) may also be included.</t>

              <t hangText="Specification document(s):"><vspace/> Reference to
              the document(s) that specify the token endpoint authorization
              method, preferably including a URI that can be used to retrieve
              a copy of the document(s). An indication of the relevant
              sections may also be included but is not required.</t>
            </list></t>
        </section>

        <section anchor="MetadataContents" title="Initial Registry Contents">
          <t>The initial contents of the OAuth Dynamic Registration Client
          Metadata registry are:</t>

          <t><?rfc subcompact="yes"?> <list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">redirect_uris</spanx></t>

              <t>Client Metadata Description: Array of redirection URIs for
              use in redirect-based flows</t>

              <t>Change controller: IESG</t>

              <t>Specification document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">token_endpoint_auth_method</spanx></t>

              <t>Client Metadata Description: Requested authentication method
              for the token endpoint</t>

              <t>Change controller: IESG</t>

              <t>Specification document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">grant_types</spanx></t>

              <t>Client Metadata Description: Array of OAuth 2.0 grant types
              that the client may use</t>

              <t>Change controller: IESG</t>

              <t>Specification document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">response_types</spanx></t>

              <t>Client Metadata Description: Array of the OAuth 2.0 response
              types that the client may use</t>

              <t>Change controller: IESG</t>

              <t>Specification document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">client_name</spanx></t>

              <t>Client Metadata Description: Human-readable name of the
              client to be presented to the user</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">client_uri</spanx></t>

              <t>Client Metadata Description: URL of a Web page providing
              information about the client</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">logo_uri</spanx></t>

              <t>Client Metadata Description: URL that references a logo for
              the client</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">scope</spanx></t>

              <t>Client Metadata Description: Space separated list of scope
              values</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">contacts</spanx></t>

              <t>Client Metadata Description: Array of strings representing
              ways to contact people responsible for this client, typically
              email addresses</t>

              <t>Change Controller: IESG</t>

              <t>Specification document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">tos_uri</spanx></t>

              <t>Client Metadata Description: URL that points to a
              human-readable Terms of Service document for the client</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">policy_uri</spanx></t>

              <t>Client Metadata Description: URL that points to a
              human-readable Policy document for the client</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">jwks_uri</spanx></t>

              <t>Client Metadata Description: URL referencing the client's
              <xref target="JWK">JSON Web Key Set</xref> document representing
              the client's public keys</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">jwks</spanx></t>

              <t>Client Metadata Description: Client's <xref target="JWK">JSON
              Web Key Set</xref> document representing the client's public
              keys</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">software_id</spanx></t>

              <t>Client Metadata Description: Identifier for the software that
              comprises a client</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">software_version</spanx></t>

              <t>Client Metadata Description: Version identifier for the
              software that comprises a client</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">client_id</spanx></t>

              <t>Client Metadata Description: Client identifier</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">client_secret</spanx></t>

              <t>Client Metadata Description: Client secret</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">client_id_issued_at</spanx></t>

              <t>Client Metadata Description: Time at which the client
              identifier was issued</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Client Metadata Name: <spanx style="verb">client_secret_expires_at</spanx></t>

              <t>Client Metadata Description: Time at which the client secret
              will expire</t>

              <t>Change Controller: IESG</t>

              <t>Specification Document(s): [[ this document ]]</t>
            </list></t>
        </section>

        <?rfc subcompact="no"?>
      </section>

      <section anchor="TEAMRegistry"
               title="OAuth Token Endpoint Authentication Methods Registry">
        <t>This specification establishes the OAuth Token Endpoint
        Authentication Methods registry.</t>

        <t>Additional values for use as <spanx style="verb">token_endpoint_auth_method</spanx>
        metadata values are registered with a Specification Required (<xref
        target="RFC5226"/>) after a two-week review period on the
        oauth-ext-review@ietf.org mailing list, on the advice of one or more
        Designated Experts. However, to allow for the allocation of values
        prior to publication, the Designated Expert(s) may approve
        registration once they are satisfied that such a specification will be
        published.</t>

        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
        mailing list for review and comment, with an appropriate subject
        (e.g., "Request to register token_endpoint_auth_method value:
        example").</t>

        <t>Within the review period, the Designated Expert(s) will either
        approve or deny the registration request, communicating this decision
        to the review list and IANA. Denials should include an explanation
        and, if applicable, suggestions as to how to make the request
        successful.</t>

        <t>IANA must only accept registry updates from the Designated
        Expert(s) and should direct all requests for registration to the
        review mailing list.</t>

        <section anchor="TEAMTemplate" title="Registration Template">
          <t><list style="hanging">
              <t
              hangText="Token Endpoint Authorization Method Name:"><vspace/>
              The name requested (e.g., "example"). This name is case
              sensitive. Names that match other registered names in a case
              insensitive manner SHOULD NOT be accepted.</t>

              <t hangText="Change controller:"><vspace/> For Standards Track
              RFCs, state "IESG". For others, give the name of the responsible
              party. Other details (e.g., postal address, email address, home
              page URI) may also be included.</t>

              <t hangText="Specification document(s):"><vspace/> Reference to
              the document(s) that specify the token endpoint authorization
              method, preferably including a URI that can be used to retrieve
              a copy of the document(s). An indication of the relevant
              sections may also be included but is not required.</t>
            </list></t>
        </section>

        <section anchor="TEAMContents" title="Initial Registry Contents">
          <t>The initial contents of the OAuth Token Endpoint Authentication
          Methods registry are:</t>

          <t><?rfc subcompact="yes"?> <list style="symbols">
              <t>Token Endpoint Authorization Method Name: <spanx
              style="verb">none</spanx></t>

              <t>Change controller: IESG</t>

              <t>Specification document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Token Endpoint Authorization Method Name: <spanx
              style="verb">client_secret_post</spanx></t>

              <t>Change controller: IESG</t>

              <t>Specification document(s): [[ this document ]]</t>
            </list></t>

          <t><list style="symbols">
              <t>Token Endpoint Authorization Method Name: <spanx
              style="verb">client_secret_basic</spanx></t>

              <t>Change controller: IESG</t>

              <t>Specification document(s): [[ this document ]]</t>
            </list></t>
        </section>

        <?rfc subcompact="no"?>
      </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Since requests to the client registration endpoint result in the
      transmission of clear-text credentials (in the HTTP request and
      response), the authorization server MUST require the use of a
      transport-layer security mechanism when sending requests to the
      registration endpoint. The server MUST support TLS 1.2 <xref
      target="RFC5246">RFC 5246</xref> and MAY support additional
      transport-layer mechanisms meeting its security requirements. When using
      TLS, the client MUST perform a TLS/SSL server certificate check, per
      <xref target="RFC6125">RFC 6125</xref>. Implementation security
      considerations can be found in <xref target="TLS.BCP">Recommendations
      for Secure Use of TLS and DTLS</xref>.</t>

      <t>For clients that use redirect-based grant types such as <spanx
      style="verb">authorization_code</spanx> and <spanx style="verb">implicit</spanx>,
      authorization servers MUST require clients to register their redirection
      URI values. This can help mitigate attacks where rogue actors inject and
      impersonate a validly registered client and intercept its authorization
      code or tokens through an invalid redirection URI or open redirector.
      Additionally, in order to prevent hijacking of the return values of the
      redirection, registered redirection URI values MUST be one of:</t>

      <t><list style="symbols">
          <t>A remote web site protected by TLS (e.g.,
          https://client.example.com/oauth_redirect)</t>

          <t>A web site hosted on the local machine using an HTTP URI (e.g.,
          http://localhost:8080/oauth_redirect)</t>

          <t>A non-HTTP application-specific URL that is available only to the
          client application (e.g., exampleapp://oauth_redirect)</t>
        </list></t>

      <t>Public clients MAY register with an authorization server using this
      protocol, if the authorization server's policy allows them. Public
      clients use a <spanx style="verb">none</spanx> value for the <spanx
      style="verb">token_endpoint_auth_method</spanx> metadata field and are
      generally used with the <spanx style="verb">implicit</spanx> grant type.
      Often these clients will be short-lived in-browser applications
      requesting access to a user's resources and access is tied to a user's
      active session at the authorization server. Since such clients often do
      not have long-term storage, it's possible that such clients would need
      to re-register every time the browser application is loaded.
      Additionally, such clients may not have ample opportunity to unregister
      themselves using the delete action before the browser closes. To avoid
      the resulting proliferation of dead client identifiers, an authorization
      server MAY decide to expire registrations for existing clients meeting
      certain criteria after a period of time has elapsed.</t>

      <t>Since different OAuth 2.0 grant types have different security and
      usage parameters, an authorization server MAY require separate
      registrations for a piece of software to support multiple grant types.
      For instance, an authorization server might require that all clients
      using the <spanx style="verb">authorization_code</spanx> grant type make
      use of a client secret for the <spanx style="verb">token_endpoint_auth_method</spanx>,
      but any clients using the <spanx style="verb">implicit</spanx> grant
      type do not use any authentication at the token endpoint. In such a
      situation, a server MAY disallow clients from registering for both the
      <spanx style="verb">authorization_code</spanx> and <spanx style="verb">implicit</spanx>
      grant types simultaneously. Similarly, the <spanx style="verb">authorization_code</spanx>
      grant type is used to represent access on behalf of an end user, but the
      <spanx style="verb">client_credentials</spanx> grant type represents
      access on behalf of the client itself. For security reasons, an
      authorization server could require that different scopes be used for
      these different use cases, and as a consequence it MAY disallow these
      two grant types from being registered together by the same client. In
      all of these cases, the authorization server would respond with an
      <spanx style="verb">invalid_client_metadata</spanx> error response.</t>

      <t>Unless used as a claim in a software statement, the authorization
      server MUST treat all client metadata as self-asserted. For instance, a
      rogue client might use the name and logo of a legitimate client that it
      is trying to impersonate. Additionally, a rogue client might try to use
      the software identifier or software version of a legitimate client to
      attempt to associate itself on the authorization server with instances
      of the legitimate client. To counteract this, an authorization server
      needs to take steps to mitigate this risk by looking at the entire
      registration request and client configuration. For instance, an
      authorization server could issue a warning if the domain/site of the
      logo doesn't match the domain/site of redirection URIs. An authorization
      server could also refuse registration requests from a known software
      identifier that is requesting different redirection URIs or a different
      client homepage URI. An authorization server can also present warning
      messages to end users about dynamically registered clients in all cases,
      especially if such clients have been recently registered or have not
      been trusted by any users at the authorization server before.</t>

      <t>In a situation where the authorization server is supporting open
      client registration, it must be extremely careful with any URL provided
      by the client that will be displayed to the user (e.g. <spanx
      style="verb">logo_uri</spanx>, <spanx style="verb">tos_uri</spanx>,
      <spanx style="verb">client_uri</spanx>, and <spanx style="verb">policy_uri</spanx>).
      For instance, a rogue client could specify a registration request with a
      reference to a drive-by download in the <spanx style="verb">policy_uri</spanx>.
      The authorization server SHOULD check to see if the <spanx style="verb">logo_uri</spanx>,
      <spanx style="verb">tos_uri</spanx>, <spanx style="verb">client_uri</spanx>,
      and <spanx style="verb">policy_uri</spanx> have the same host and scheme
      as the those defined in the array of <spanx style="verb">redirect_uris</spanx>
      and that all of these URIs resolve to valid web pages.</t>

      <t>Clients MAY use both the direct JSON object and the JWT-encoded
      software statement to present client metadata to the authorization
      server as part of the registration request. A software statement is
      cryptographically protected and represents claims made by the issuer of
      the statement, while the JSON object represents the self-asserted claims
      made by the client or developer directly. If the software statement is
      valid and signed by an acceptable authority (such as the software API
      publisher), the values of client metadata within the software statement
      MUST take precedence over those metadata values presented in the plain
      JSON object, which could have been modified en route.</t>

      <t>The software statement is an item that is self-asserted by the
      client, even though its contents have been digitally signed or MACed by
      the issuer of the software statement. As such, presentation of the
      software statement is not sufficient in most cases to fully identity a
      piece of client software. An initial access token, in contrast, does not
      necessarily contain information about a particular piece of client
      software but instead represents authorization to use the registration
      endpoint. An authorization server MUST consider the full registration
      request, including the software statement, initial access token, and
      JSON client metadata values, when deciding whether to honor a given
      registration request.</t>

      <t>If an authorization server receives a registration request for a
      client that uses the same <spanx style="verb">software_id</spanx> and
      <spanx style="verb">software_version</spanx> values as another client,
      the server should treat the new registration as being suspect. It is
      possible that the new client is trying to impersonate the existing
      client.</t>

      <t>Since a client identifier is a public value that can be used to
      impersonate a client at the authorization endpoint, an authorization
      server that decides to issue the same client identifier to multiple
      instances of a registered client needs to be very particular about the
      circumstances under which this occurs. For instance, the authorization
      server can limit a given client identifier to clients using the same
      redirect-based flow and the same redirection URIs. An authorization
      server SHOULD NOT issue the same client secret to multiple instances of
      a registered client, even if they are issued the same client identifier,
      or else the client secret could be leaked, allowing malicious impostors
      to impersonate a confidential client.</t>
    </section>

    <section title="Privacy Considerations">
      <t>As the protocol described in this specification deals almost
      exclusively with information about software and not about people, there
      are very few privacy concerns for its use. The notable exception is the
      <spanx style="verb">contacts</spanx> field as defined in <xref
      target="ClientMetadata">Client Metadata</xref>, which contains contact
      information for the developers or other parties responsible for the
      client software. These values are intended to be displayed to end users
      and will be available to the administrators of the authorization server.
      As such, the developer may wish to provide an email address or other
      contact information expressly dedicated to the purpose of supporting the
      client instead of using their personal or professional addresses.
      Alternatively, the developer may wish to provide a collective email
      address for the client to allow for continuing contact and support of
      the client software after the developer moves on and someone else takes
      over that responsibility.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml'?>

      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml'?>

      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml'?>

      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5646.xml'?>

      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml'?>

      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml'?>

      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml'?>

      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml'?>

      <reference anchor="JWT">
        <front>
          <title>JSON Web Token (JWT)</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization>Microsoft</organization>

            <address>
              <email>mbj@microsoft.com</email>

              <uri>http://self-issued.info/</uri>
            </address>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>

            <address>
              <email>ve7jtb@ve7jtb.com</email>

              <uri>http://www.thread-safe.com/</uri>
            </address>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research
            Institute</organization>

            <address>
              <email>n-sakimura@nri.co.jp</email>

              <uri>http://nat.sakimura.org/</uri>
            </address>
          </author>

          <date day="4" month="July" year="2014"/>
        </front>

        <seriesInfo name="Internet-Draft"
                    value="draft-ietf-oauth-json-web-token"/>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-json-web-token"
                type="HTML"/>
      </reference>

      <reference anchor="OAuth.JWT">
        <front>
          <title abbrev="OAuth JWT Assertion Profiles">JSON Web Token (JWT)
          Profile for OAuth 2.0 Client Authentication and Authorization
          Grants</title>

          <!-- add 'role="editor"' below for the editors if appropriate -->

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <!-- role="editor" -->

            <organization>Microsoft</organization>

            <address>
              <email>mbj@microsoft.com</email>

              <uri>http://self-issued.info/</uri>
            </address>
          </author>

          <author fullname="Brian Campbell" initials="B." surname="Campbell">
            <organization abbrev="Ping Identity">Ping Identity</organization>

            <address>
              <email>brian.d.campbell@gmail.com</email>
            </address>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce</organization>

            <address>
              <email>cmortimore@salesforce.com</email>
            </address>
          </author>

          <date day="23" month="July" year="2014"/>
        </front>

        <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-jwt-bearer"/>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-jwt-bearer"
                type="HTML"/>
      </reference>

      <reference anchor="OAuth.SAML2">
        <front>
          <title abbrev="OAuth SAML Assertion Profiles">SAML 2.0 Profile for
          OAuth 2.0 Client Authentication and Authorization Grants</title>

          <!-- add 'role="editor"' below for the editors if appropriate -->

          <author fullname="Brian Campbell" initials="B." surname="Campbell">
            <organization abbrev="Ping Identity">Ping Identity</organization>

            <address>
              <email>brian.d.campbell@gmail.com</email>
            </address>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce.com</organization>

            <address>
              <email>cmortimore@salesforce.com</email>
            </address>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization>Microsoft</organization>

            <address>
              <email>mbj@microsoft.com</email>

              <uri>http://self-issued.info/</uri>
            </address>
          </author>

          <date day="23" month="July" year="2014"/>
        </front>

        <seriesInfo name="Internet-Draft"
                    value="draft-ietf-oauth-saml2-bearer"/>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-saml2-bearer"
                type="HTML"/>
      </reference>

      <reference anchor="JWS">
        <front>
          <title>JSON Web Signature (JWS)</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization>Microsoft</organization>

            <address>
              <email>mbj@microsoft.com</email>

              <uri>http://self-issued.info/</uri>
            </address>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>

            <address>
              <email>ve7jtb@ve7jtb.com</email>

              <uri>http://www.thread-safe.com/</uri>
            </address>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research
            Institute</organization>

            <address>
              <email>n-sakimura@nri.co.jp</email>

              <uri>http://nat.sakimura.org/</uri>
            </address>
          </author>

          <date day="4" month="July" year="2014"/>
        </front>

        <seriesInfo name="Internet-Draft"
                    value="draft-ietf-jose-json-web-signature"/>

        <format type="HTML"/>
      </reference>

      <reference anchor="JWK">
        <front>
          <title>JSON Web Key (JWK)</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization>Microsoft</organization>

            <address>
              <email>mbj@microsoft.com</email>

              <uri>http://self-issued.info/</uri>
            </address>
          </author>

          <date day="4" month="July" year="2014"/>
        </front>

        <seriesInfo name="Internet-Draft" value="draft-ietf-jose-json-web-key"/>

        <format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-key"
                type="HTML"/>
      </reference>

      <reference anchor="IANA.Language">
        <front>
          <title>Language Subtag Registry</title>

          <author>
            <organization>Internet Assigned Numbers Authority
            (IANA)</organization>
          </author>

          <date year="2005"/>
        </front>

        <format target="http://www.iana.org/assignments/language-subtag-registry"
                type="TXT"/>
      </reference>
    </references>

    <references title="Informative References">
      <reference anchor="OAuth.Registration.Management">
        <front>
          <title abbrev="OAuth 2.0 Dynamic Registration Management">OAuth 2.0
          Dynamic Client Registration Management Protocol</title>

          <author fullname="Justin Richer" initials="J" surname="Richer">
            <organization>The MITRE Corporation</organization>

            <address>
              <email>jricher@mitre.org</email>
            </address>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>

            <address>
              <email>mbj@microsoft.com</email>

              <uri>http://self-issued.info/</uri>
            </address>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>

            <address>
              <email>ve7jtb@ve7jtb.com</email>
            </address>
          </author>

          <author fullname="Maciej Machulak" initials="M" surname="Machulak">
            <organization>Newcastle University</organization>

            <address>
              <email>m.p.machulak@ncl.ac.uk</email>

              <uri>http://ncl.ac.uk/</uri>
            </address>
          </author>

          <date day="26" month="August" year="2014"/>
        </front>

        <seriesInfo name="Internet-Draft"
                    value="draft-ietf-oauth-dyn-reg-management"/>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-dyn-reg-management"
                type="HTML"/>
      </reference>

      <reference anchor="OpenID.Registration">
        <front>
          <title>OpenID Connect Dynamic Client Registration 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <date day="25" month="February" year="2014"/>
        </front>

        <format target="http://openid.net/specs/openid-connect-registration-1_0.html"
                type="HTML"/>
      </reference>

      <reference anchor="TLS.BCP">
        <front>
          <title>Recommendations for Secure Use of TLS and DTLS</title>

          <author fullname="Yaron Sheffer" initials="Y." surname="Sheffer">
            <organization>Porticor</organization>

            <address>
              <postal>
                <street>29 HaHarash St.</street>

                <city>Hod HaSharon</city>

                <region/>

                <code>4501303</code>

                <country>Israel</country>
              </postal>

              <email>yaronf.ietf@gmail.com</email>
            </address>
          </author>

          <author fullname="Ralph Holz" initials="R." surname="Holz">
            <organization>Technische Universitaet Muenchen</organization>

            <address>
              <postal>
                <street>Boltzmannstr. 3</street>

                <city>Garching</city>

                <region/>

                <code>85748</code>

                <country>Germany</country>
              </postal>

              <email>ralph.ietf@gmail.com</email>
            </address>
          </author>

          <author fullname="Peter Saint-Andre" initials="P."
                  surname="Saint-Andre">
            <organization>&amp;yet</organization>

            <address>
              <email>peter@andyet.com</email>

              <uri>https://andyet.com/</uri>
            </address>
          </author>

          <date day="11" month="November" year="2014"/>
        </front>
      </reference>

      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-hardjono-oauth-umacore-10.xml' ?>
    </references>

    <section anchor="UseCases" title="Use Cases">
      <t>This appendix describes different ways that this specification can be
      utilized, including describing some of the choices that may need to be
      made. Some of the choices are independent and can be used in
      combination, whereas some of the choices are interrelated.</t>

      <section anchor="OpenOrProtected"
               title="Open versus Protected Dynamic Client Registration">
        <section anchor="OpenRegistration"
                 title="Open Dynamic Client Registration">
          <t>Authorization servers that support open registration allow
          registrations to be made with no initial access token. This allows
          all client software to register with the authorization server.</t>
        </section>

        <section anchor="ProtectedRegistration"
                 title="Protected Dynamic Client Registration">
          <t>Authorization servers that support protected registration require
          that an initial access token be used when making registration
          requests. While the method by which a client or developer receives
          this initial access token and the method by which the authorization
          server validates this initial access token are out of scope for this
          specification, a common approach is for the developer to use a
          manual pre-registration portal at the authorization server that
          issues an initial access token to the developer.</t>
        </section>
      </section>

      <section anchor="SoftwareStatementUses"
               title="Registration Without or With Software Statements">
        <section anchor="NoSoftwareStatement"
                 title="Registration Without a Software Statement">
          <t>When a software statement is not used in the registration
          request, the authorization server must be willing to use client
          metadata values without them being digitally signed or MACed (and
          thereby attested to) by any authority. (Note that this choice is
          independent of the Open versus Protected choice, and that an initial
          access token is another possible form of attestation.)</t>
        </section>

        <section anchor="WithSoftwareStatement"
                 title="Registration With a Software Statement">
          <t>A software statement can be used in a registration request to
          provide attestation by an authority for a set of client metadata
          values. This can be useful when the authorization server wants to
          restrict registration to client software attested to by a set of
          authorities or when it wants to know that multiple registration
          requests refer to the same piece of client software.</t>
        </section>
      </section>

      <section anchor="ByClientOrDeveloper"
               title="Registration by the Client or Developer">
        <section anchor="ByClient" title="Registration by the Client">
          <t>In some use cases, client software will dynamically register
          itself with an authorization server to obtain a client identifier
          and other information needed to interact with the authorization
          server. In this case, no client identifier for the authorization
          server is packaged with the client software.</t>
        </section>

        <section anchor="ByDeveloper" title="Registration by the Developer">
          <t>In some cases, the developer (or development software being used
          by the developer) will pre-register the client software with the
          authorization server or a set of authorization servers. In this
          case, the client identifier value(s) for the authorization server(s)
          can be packaged with the client software.</t>
        </section>
      </section>

      <section anchor="IDPerInstanceOrSoftware"
               title="Client ID per Client Instance or per Client Software">
        <section anchor="IDPerInstance"
                 title="Client ID per Client Software Instance">
          <t>In some cases, each deployed instance of a piece of client
          software will dynamically register and obtain distinct client
          identifier values. This can be advantageous, for instance, if the
          code flow is being used, as it also enables each client instance to
          have its own client secret. This can be useful for native clients,
          which cannot maintain the secrecy of a client secret value packaged
          with the software, but which may be able to maintain the secrecy of
          a per-instance client secret.</t>
        </section>

        <section anchor="SharedID"
                 title="Client ID Shared Among All Instances of Client Software">
          <t>In some cases, each deployed instance of a piece of client
          software will share a common client identifier value. For instance,
          this is often the case for in-browser clients using the implicit
          flow, when no client secret is involved. Particular authorization
          servers might choose, for instance, to maintain a mapping between
          software statement values and client identifier values, and return
          the same client identifier value for all registration requests for a
          particular piece of software. The circumstances under which an
          authorization server would do so, and the specific software
          statement characteristics required in this case, are beyond the
          scope of this specification.</t>
        </section>
      </section>

      <section anchor="StatefulOrStateless"
               title="Stateful or Stateless Registration">
        <section anchor="Stateful" title="Stateful Client Registration">
          <t>In some cases, authorization servers will maintain state about
          registered clients, typically indexing this state using the client
          identifier value. This state would typically include the client
          metadata values associated with the client registration, and
          possibly other state specific to the authorization server's
          implementation. When stateful registration is used, operations to
          support retrieving and/or updating this state may be supported. One
          possible set of operations upon stateful registrations is described
          in the <xref target="OAuth.Registration.Management"/>
          specification.</t>
        </section>

        <section anchor="Stateless" title="Stateless Client Registration">
          <t>In some cases, authorization servers will be implemented in a
          manner the enables them to not maintain any local state about
          registered clients. One means of doing this is to encode all the
          registration state in the returned client identifier value, and
          possibly encrypting the state to the authorization server to
          maintain the confidentiality and integrity of the state.</t>
        </section>
      </section>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The authors thank the OAuth Working Group, the User-Managed Access
      Working Group, and the OpenID Connect Working Group participants for
      their input to this document. In particular, the following individuals
      have been instrumental in their review and contribution to various
      versions of this document: Amanda Anganes, Derek Atkins, Tim Bray,
      Domenico Catalano, Donald Coffin, Vladimir Dzhuvinov, George Fletcher,
      Thomas Hardjono, Phil Hunt, William Kim, Torsten Lodderstedt, Eve Maler,
      Josh Mandel, Nov Matake, Tony Nadalin, Nat Sakimura, Christian Scholz,
      and Hannes Tschofenig.</t>
    </section>

    <section anchor="History" title="Document History">
      <t>[[ to be removed by the RFC editor before publication as an RFC
      ]]</t>

      <t>-24</t>

      <t><list style="symbols">
          <t/>
        </list></t>

      <t>-23</t>

      <t><list style="symbols">
          <t>Updated author information.</t>
        </list></t>

      <t>-22</t>

      <t><list style="symbols">
          <t>Reorganized registration response sections.</t>

          <t>Addressed shepherd comments.</t>

          <t>Added concrete JWK set to example.</t>
        </list></t>

      <t>-21</t>

      <t><list style="symbols">
          <t>Applied minor editorial fixes.</t>

          <t>Added software statement examples.</t>

          <t>Moved software statement request details to sub-section.</t>

          <t>Clarified that a server MAY ignore the software statement (just
          as it MAY ignore other metadata values).</t>

          <t>Removed TLS 1.0.</t>

          <t>Added privacy considerations around "contacts" field.</t>

          <t>Marked software_id as RECOMMENDED inside of a software
          statement.</t>
        </list></t>

      <t>-20</t>

      <t><list style="symbols">
          <t>Applied minor editorial fixes from working group comments.</t>
        </list></t>

      <t>-19</t>

      <t><list style="symbols">
          <t>Added informative references to the OpenID Connect Dynamic Client
          Registration and UMA specifications in the introduction.</t>

          <t>Clarified the <spanx style="verb">jwks</spanx> and <spanx
          style="verb">jwks_uri</spanx> descriptions and included an example
          situation in which they might be used.</t>

          <t>Removed <spanx style="verb">application_type</spanx>.</t>

          <t>Added redirection URI usage restrictions to the Security
          Considerations section, based on the client type.</t>

          <t>Expanded the <spanx style="verb">tos_uri</spanx> and <spanx
          style="verb">policy_uri</spanx> descriptions.</t>
        </list></t>

      <t>-18 <list style="symbols">
          <t>Corrected an example HTTP response status code to be 201
          Created.</t>

          <t>Said more about who issues and uses initial access tokens and
          software statements.</t>

          <t>Stated that the use of an initial access token is required when
          the authorization server limits the parties that can register a
          client.</t>

          <t>Stated that the implementation and use of all client metadata
          fields is OPTIONAL, other than <spanx style="verb">redirect_uris</spanx>,
          which MUST be used for redirect-based flows and implemented to
          fulfill the requirement in Section 2 of OAuth 2.0.</t>

          <t>Added the <spanx style="verb">application_type</spanx> metadata
          value, which had somehow been omitted.</t>

          <t>Added missing default metadata values, which had somehow been
          omitted.</t>

          <t>Clarified that the <spanx style="verb">software_id</spanx> is
          ultimately asserted by the client developer.</t>

          <t>Clarified that the <spanx style="verb">error</spanx> member is
          required in error responses, <spanx style="verb">error_description</spanx>
          member is optional, and other members may be present.</t>

          <t>Added security consideration about registrations with duplicate
          <spanx style="verb">software_id</spanx> and <spanx style="verb">software_version</spanx>
          values.</t>
        </list></t>

      <t>-17 <list style="symbols">
          <t>Merged draft-ietf-oauth-dyn-reg-metadata back into this
          document.</t>

          <t>Removed "Core" from the document title.</t>

          <t>Explicitly state that all metadata members are optional.</t>

          <t>Clarified language around software statements for use in
          registration context.</t>

          <t>Clarified that software statements need to be digitally signed or
          MACed.</t>

          <t>Added a <spanx style="verb">jwks</spanx> metadata parameter to
          parallel the <spanx style="verb">jwks_uri</spanx> parameter.</t>

          <t>Removed normative language from terminology.</t>

          <t>Expanded abstract and introduction.</t>

          <t>Addressed review comments from several working group members.</t>
        </list></t>

      <t>-16 <list style="symbols">
          <t>Replaced references to draft-jones-oauth-dyn-reg-metadata and
          draft-jones-oauth-dyn-reg-management with
          draft-ietf-oauth-dyn-reg-metadata and
          draft-ietf-oauth-dyn-reg-management.</t>

          <t>Addressed review comments by Phil Hunt and Tony Nadalin.</t>
        </list></t>

      <t>-15 <list style="symbols">
          <t>Partitioned the Dynamic Client Registration specification into
          core, metadata, and management specifications. This built on work
          first published as draft-richer-oauth-dyn-reg-core-00 and
          draft-richer-oauth-dyn-reg-management-00.</t>

          <t>Added the ability to use Software Statements. This built on work
          first published as draft-hunt-oauth-software-statement-00 and
          draft-hunt-oauth-client-association-00.</t>

          <t>Created the IANA OAuth Registration Client Metadata registry for
          registering Client Metadata values.</t>

          <t>Defined Client Instance term and stated that multiple instances
          can use the same client identifier value under certain
          circumstances.</t>

          <t>Rewrote the introduction.</t>

          <t>Rewrote the Use Cases appendix.</t>
        </list></t>

      <t>-14</t>

      <t><list style="symbols">
          <t>Added software_id and software_version metadata fields</t>

          <t>Added direct references to RFC6750 errors in read/update/delete
          methods</t>
        </list></t>

      <t>-13</t>

      <t><list style="symbols">
          <t>Fixed broken example text in registration request and in delete
          request</t>

          <t>Added security discussion of separating clients of different
          grant types</t>

          <t>Fixed error reference to point to RFC6750 instead of RFC6749</t>

          <t>Clarified that servers must respond to all requests to
          configuration endpoint, even if it's just an error code</t>

          <t>Lowercased all Terms to conform to style used in RFC6750</t>
        </list></t>

      <t>-12</t>

      <t><list style="symbols">
          <t>Improved definition of Initial Access Token</t>

          <t>Changed developer registration scenario to have the Initial
          Access Token gotten through a normal OAuth 2.0 flow</t>

          <t>Moved non-normative client lifecycle examples to appendix</t>

          <t>Marked differentiating between auth servers as out of scope</t>

          <t>Added protocol flow diagram</t>

          <t>Added credential rotation discussion</t>

          <t>Called out Client Registration Endpoint as an OAuth 2.0 Protected
          Resource</t>

          <t>Cleaned up several pieces of text</t>
        </list></t>

      <t>-11</t>

      <t><list style="symbols">
          <t>Added localized text to registration request and response
          examples.</t>

          <t>Removed <spanx style="verb">client_secret_jwt</spanx> and <spanx
          style="verb">private_key_jwt</spanx>.</t>

          <t>Clarified <spanx style="verb">tos_uri</spanx> and <spanx
          style="verb">policy_uri</spanx> definitions.</t>

          <t>Added the OAuth Token Endpoint Authentication Methods registry
          for registering <spanx style="verb">token_endpoint_auth_method</spanx>
          metadata values.</t>

          <t>Removed uses of non-ASCII characters, per RFC formatting
          rules.</t>

          <t>Changed <spanx style="verb">expires_at</spanx> to <spanx
          style="verb">client_secret_expires_at</spanx> and <spanx
          style="verb">issued_at</spanx> to <spanx style="verb">client_id_issued_at</spanx>
          for greater clarity.</t>

          <t>Added explanatory text for different credentials (Initial Access
          Token, Registration Access Token, Client Credentials) and what
          they're used for.</t>

          <t>Added Client Lifecycle discussion and examples.</t>

          <t>Defined Initial Access Token in Terminology section.</t>
        </list></t>

      <t>-10</t>

      <t><list style="symbols">
          <t>Added language to point out that scope values are
          service-specific</t>

          <t>Clarified normative language around client metadata</t>

          <t>Added extensibility to token_endpoint_auth_method using absolute
          URIs</t>

          <t>Added security consideration about registering redirect URIs</t>

          <t>Changed erroneous 403 responses to 401's with notes about token
          handling</t>

          <t>Added example for initial registration credential</t>
        </list></t>

      <t>-09</t>

      <t><list style="symbols">
          <t>Added method of internationalization for Client Metadata
          values</t>

          <t>Fixed SAML reference</t>
        </list></t>

      <t>-08</t>

      <t><list style="symbols">
          <t>Collapsed jwk_uri, jwk_encryption_uri, x509_uri, and
          x509_encryption_uri into a single jwks_uri parameter</t>

          <t>Renamed grant_type to grant_types since it's a plural value</t>

          <t>Formalized name of "OAuth 2.0" throughout document</t>

          <t>Added JWT Bearer Assertion and SAML 2 Bearer Assertion to example
          grant types</t>

          <t>Added response_types parameter and explanatory text on its use
          with and relationship to grant_types</t>
        </list></t>

      <t>-07</t>

      <t><list style="symbols">
          <t>Changed registration_access_url to registration_client_uri</t>

          <t>Fixed missing text in 5.1</t>

          <t>Added Pragma: no-cache to examples</t>

          <t>Changed "no such client" error to 403</t>

          <t>Renamed Client Registration Access Endpoint to Client
          Configuration Endpoint</t>

          <t>Changed all the parameter names containing "_url" to instead use
          "_uri"</t>

          <t>Updated example text for forming Client Configuration Endpoint
          URL</t>
        </list></t>

      <t>-06</t>

      <t><list style="symbols">
          <t>Removed secret_rotation as a client-initiated action, including
          removing client secret rotation endpoint and parameters.</t>

          <t>Changed _links structure to single value
          registration_access_url.</t>

          <t>Collapsed create/update/read responses into client info
          response.</t>

          <t>Changed return code of create action to 201.</t>

          <t>Added section to describe suggested generation and composition of
          Client Registration Access URL.</t>

          <t>Added clarifying text to PUT and POST requests to specify JSON in
          the body.</t>

          <t>Added Editor's Note to DELETE operation about its inclusion.</t>

          <t>Added Editor's Note to registration_access_url about alternate
          syntax proposals.</t>
        </list></t>

      <t>-05</t>

      <t><list style="symbols">
          <t>changed redirect_uri and contact to lists instead of space
          delimited strings</t>

          <t>removed operation parameter</t>

          <t>added _links structure</t>

          <t>made client update management more RESTful</t>

          <t>split endpoint into three parts</t>

          <t>changed input to JSON from form-encoded</t>

          <t>added READ and DELETE operations</t>

          <t>removed Requirements section</t>

          <t>changed token_endpoint_auth_type back to
          token_endpoint_auth_method to match OIDC who changed to match us</t>
        </list></t>

      <t>-04</t>

      <t><list style="symbols">
          <t>removed default_acr, too undefined in the general OAuth2 case</t>

          <t>removed default_max_auth_age, since there's no mechanism for
          supplying a non-default max_auth_age in OAuth2</t>

          <t>clarified signing and encryption URLs</t>

          <t>changed token_endpoint_auth_method to token_endpoint_auth_type to
          match OIDC</t>
        </list></t>

      <t>-03</t>

      <t><list style="symbols">
          <t>added scope and grant_type claims</t>

          <t>fixed various typos and changed wording for better clarity</t>

          <t>endpoint now returns the full set of client information</t>

          <t>operations on client_update allow for three actions on metadata:
          leave existing value, clear existing value, replace existing value
          with new value</t>
        </list></t>

      <t>-02</t>

      <t><list style="symbols">
          <t>Reorganized contributors and references</t>

          <t>Moved OAuth references to RFC</t>

          <t>Reorganized model/protocol sections for clarity</t>

          <t>Changed terminology to "client register" instead of "client
          associate"</t>

          <t>Specified that client_id must match across all subsequent
          requests</t>

          <t>Fixed RFC2XML formatting, especially on lists</t>
        </list></t>

      <t>-01</t>

      <t><list style="symbols">
          <t>Merged UMA and OpenID Connect registrations into a single
          document</t>

          <t>Changed to form-parameter inputs to endpoint</t>

          <t>Removed pull-based registration</t>
        </list></t>

      <t>-00</t>

      <t><list style="symbols">
          <t>Imported original UMA draft specification</t>
        </list></t>
    </section>
  </back>
</rfc>
